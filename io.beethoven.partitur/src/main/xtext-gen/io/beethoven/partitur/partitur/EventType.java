/**
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.partitur;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Event Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see io.beethoven.partitur.partitur.PartiturPackage#getEventType()
 * @model
 * @generated
 */
public enum EventType implements Enumerator
{
  /**
   * The '<em><b>TASK STARTED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TASK_STARTED_VALUE
   * @generated
   * @ordered
   */
  TASK_STARTED(0, "TASK_STARTED", "TASK_STARTED"),

  /**
   * The '<em><b>TASK COMPLETED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TASK_COMPLETED_VALUE
   * @generated
   * @ordered
   */
  TASK_COMPLETED(1, "TASK_COMPLETED", "TASK_COMPLETED"),

  /**
   * The '<em><b>TASK TIMEDOUT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TASK_TIMEDOUT_VALUE
   * @generated
   * @ordered
   */
  TASK_TIMEDOUT(2, "TASK_TIMEDOUT", "TASK_TIMEDOUT"),

  /**
   * The '<em><b>TASK FAILED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TASK_FAILED_VALUE
   * @generated
   * @ordered
   */
  TASK_FAILED(3, "TASK_FAILED", "TASK_FAILED"),

  /**
   * The '<em><b>WORKFLOW SCHEDULED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #WORKFLOW_SCHEDULED_VALUE
   * @generated
   * @ordered
   */
  WORKFLOW_SCHEDULED(4, "WORKFLOW_SCHEDULED", "WORKFLOW_SCHEDULED"),

  /**
   * The '<em><b>WORKFLOW STARTED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #WORKFLOW_STARTED_VALUE
   * @generated
   * @ordered
   */
  WORKFLOW_STARTED(5, "WORKFLOW_STARTED", "WORKFLOW_STARTED"),

  /**
   * The '<em><b>WORKFLOW COMPLETED</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #WORKFLOW_COMPLETED_VALUE
   * @generated
   * @ordered
   */
  WORKFLOW_COMPLETED(6, "WORKFLOW_COMPLETED", "WORKFLOW_COMPLETED");

  /**
   * The '<em><b>TASK STARTED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TASK STARTED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TASK_STARTED
   * @model
   * @generated
   * @ordered
   */
  public static final int TASK_STARTED_VALUE = 0;

  /**
   * The '<em><b>TASK COMPLETED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TASK COMPLETED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TASK_COMPLETED
   * @model
   * @generated
   * @ordered
   */
  public static final int TASK_COMPLETED_VALUE = 1;

  /**
   * The '<em><b>TASK TIMEDOUT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TASK TIMEDOUT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TASK_TIMEDOUT
   * @model
   * @generated
   * @ordered
   */
  public static final int TASK_TIMEDOUT_VALUE = 2;

  /**
   * The '<em><b>TASK FAILED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TASK FAILED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TASK_FAILED
   * @model
   * @generated
   * @ordered
   */
  public static final int TASK_FAILED_VALUE = 3;

  /**
   * The '<em><b>WORKFLOW SCHEDULED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>WORKFLOW SCHEDULED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #WORKFLOW_SCHEDULED
   * @model
   * @generated
   * @ordered
   */
  public static final int WORKFLOW_SCHEDULED_VALUE = 4;

  /**
   * The '<em><b>WORKFLOW STARTED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>WORKFLOW STARTED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #WORKFLOW_STARTED
   * @model
   * @generated
   * @ordered
   */
  public static final int WORKFLOW_STARTED_VALUE = 5;

  /**
   * The '<em><b>WORKFLOW COMPLETED</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>WORKFLOW COMPLETED</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #WORKFLOW_COMPLETED
   * @model
   * @generated
   * @ordered
   */
  public static final int WORKFLOW_COMPLETED_VALUE = 6;

  /**
   * An array of all the '<em><b>Event Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final EventType[] VALUES_ARRAY =
    new EventType[]
    {
      TASK_STARTED,
      TASK_COMPLETED,
      TASK_TIMEDOUT,
      TASK_FAILED,
      WORKFLOW_SCHEDULED,
      WORKFLOW_STARTED,
      WORKFLOW_COMPLETED,
    };

  /**
   * A public read-only list of all the '<em><b>Event Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<EventType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Event Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static EventType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      EventType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Event Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static EventType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      EventType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Event Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static EventType get(int value)
  {
    switch (value)
    {
      case TASK_STARTED_VALUE: return TASK_STARTED;
      case TASK_COMPLETED_VALUE: return TASK_COMPLETED;
      case TASK_TIMEDOUT_VALUE: return TASK_TIMEDOUT;
      case TASK_FAILED_VALUE: return TASK_FAILED;
      case WORKFLOW_SCHEDULED_VALUE: return WORKFLOW_SCHEDULED;
      case WORKFLOW_STARTED_VALUE: return WORKFLOW_STARTED;
      case WORKFLOW_COMPLETED_VALUE: return WORKFLOW_COMPLETED;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EventType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //EventType
