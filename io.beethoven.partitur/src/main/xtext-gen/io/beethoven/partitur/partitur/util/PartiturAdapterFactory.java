/**
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.partitur.util;

import io.beethoven.partitur.partitur.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see io.beethoven.partitur.partitur.PartiturPackage
 * @generated
 */
public class PartiturAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PartiturPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PartiturPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PartiturSwitch<Adapter> modelSwitch =
    new PartiturSwitch<Adapter>()
    {
      @Override
      public Adapter casePartiturWorkflow(PartiturWorkflow object)
      {
        return createPartiturWorkflowAdapter();
      }
      @Override
      public Adapter casePartiturTask(PartiturTask object)
      {
        return createPartiturTaskAdapter();
      }
      @Override
      public Adapter casePartiturHandler(PartiturHandler object)
      {
        return createPartiturHandlerAdapter();
      }
      @Override
      public Adapter casePartiturCondition(PartiturCondition object)
      {
        return createPartiturConditionAdapter();
      }
      @Override
      public Adapter casePartiturCommand(PartiturCommand object)
      {
        return createPartiturCommandAdapter();
      }
      @Override
      public Adapter caseHttpGet(HttpGet object)
      {
        return createHttpGetAdapter();
      }
      @Override
      public Adapter caseHttpPost(HttpPost object)
      {
        return createHttpPostAdapter();
      }
      @Override
      public Adapter caseHttpPut(HttpPut object)
      {
        return createHttpPutAdapter();
      }
      @Override
      public Adapter caseHttpDelete(HttpDelete object)
      {
        return createHttpDeleteAdapter();
      }
      @Override
      public Adapter caseHttpHeader(HttpHeader object)
      {
        return createHttpHeaderAdapter();
      }
      @Override
      public Adapter caseUriVariables(UriVariables object)
      {
        return createUriVariablesAdapter();
      }
      @Override
      public Adapter caseQueryParam(QueryParam object)
      {
        return createQueryParamAdapter();
      }
      @Override
      public Adapter caseHttpBody(HttpBody object)
      {
        return createHttpBodyAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.PartiturWorkflow <em>Workflow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.PartiturWorkflow
   * @generated
   */
  public Adapter createPartiturWorkflowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.PartiturTask <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.PartiturTask
   * @generated
   */
  public Adapter createPartiturTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.PartiturHandler <em>Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.PartiturHandler
   * @generated
   */
  public Adapter createPartiturHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.PartiturCondition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.PartiturCondition
   * @generated
   */
  public Adapter createPartiturConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.PartiturCommand <em>Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.PartiturCommand
   * @generated
   */
  public Adapter createPartiturCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.HttpGet <em>Http Get</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.HttpGet
   * @generated
   */
  public Adapter createHttpGetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.HttpPost <em>Http Post</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.HttpPost
   * @generated
   */
  public Adapter createHttpPostAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.HttpPut <em>Http Put</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.HttpPut
   * @generated
   */
  public Adapter createHttpPutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.HttpDelete <em>Http Delete</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.HttpDelete
   * @generated
   */
  public Adapter createHttpDeleteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.HttpHeader <em>Http Header</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.HttpHeader
   * @generated
   */
  public Adapter createHttpHeaderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.UriVariables <em>Uri Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.UriVariables
   * @generated
   */
  public Adapter createUriVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.QueryParam <em>Query Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.QueryParam
   * @generated
   */
  public Adapter createQueryParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.beethoven.partitur.partitur.HttpBody <em>Http Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.beethoven.partitur.partitur.HttpBody
   * @generated
   */
  public Adapter createHttpBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PartiturAdapterFactory
