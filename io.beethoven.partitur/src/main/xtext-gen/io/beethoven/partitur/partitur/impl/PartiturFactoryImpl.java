/**
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.partitur.impl;

import io.beethoven.partitur.partitur.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PartiturFactoryImpl extends EFactoryImpl implements PartiturFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PartiturFactory init()
  {
    try
    {
      PartiturFactory thePartiturFactory = (PartiturFactory)EPackage.Registry.INSTANCE.getEFactory(PartiturPackage.eNS_URI);
      if (thePartiturFactory != null)
      {
        return thePartiturFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PartiturFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PartiturPackage.PARTITUR_WORKFLOW: return createPartiturWorkflow();
      case PartiturPackage.PARTITUR_TASK: return createPartiturTask();
      case PartiturPackage.PARTITUR_HANDLER: return createPartiturHandler();
      case PartiturPackage.PARTITUR_CONDITION: return createPartiturCondition();
      case PartiturPackage.PARTITUR_COMMAND: return createPartiturCommand();
      case PartiturPackage.HTTP_GET: return createHttpGet();
      case PartiturPackage.HTTP_POST: return createHttpPost();
      case PartiturPackage.HTTP_PUT: return createHttpPut();
      case PartiturPackage.HTTP_DELETE: return createHttpDelete();
      case PartiturPackage.HTTP_HEADER: return createHttpHeader();
      case PartiturPackage.URI_VARIABLES: return createUriVariables();
      case PartiturPackage.QUERY_PARAM: return createQueryParam();
      case PartiturPackage.HTTP_BODY: return createHttpBody();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PartiturPackage.PARTITUR_CONDITION_FUNCTION:
        return createPartiturConditionFunctionFromString(eDataType, initialValue);
      case PartiturPackage.PARTITUR_COMMAND_FUNCTION:
        return createPartiturCommandFunctionFromString(eDataType, initialValue);
      case PartiturPackage.EVENT_TYPE:
        return createEventTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case PartiturPackage.PARTITUR_CONDITION_FUNCTION:
        return convertPartiturConditionFunctionToString(eDataType, instanceValue);
      case PartiturPackage.PARTITUR_COMMAND_FUNCTION:
        return convertPartiturCommandFunctionToString(eDataType, instanceValue);
      case PartiturPackage.EVENT_TYPE:
        return convertEventTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturWorkflow createPartiturWorkflow()
  {
    PartiturWorkflowImpl partiturWorkflow = new PartiturWorkflowImpl();
    return partiturWorkflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturTask createPartiturTask()
  {
    PartiturTaskImpl partiturTask = new PartiturTaskImpl();
    return partiturTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturHandler createPartiturHandler()
  {
    PartiturHandlerImpl partiturHandler = new PartiturHandlerImpl();
    return partiturHandler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturCondition createPartiturCondition()
  {
    PartiturConditionImpl partiturCondition = new PartiturConditionImpl();
    return partiturCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturCommand createPartiturCommand()
  {
    PartiturCommandImpl partiturCommand = new PartiturCommandImpl();
    return partiturCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpGet createHttpGet()
  {
    HttpGetImpl httpGet = new HttpGetImpl();
    return httpGet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpPost createHttpPost()
  {
    HttpPostImpl httpPost = new HttpPostImpl();
    return httpPost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpPut createHttpPut()
  {
    HttpPutImpl httpPut = new HttpPutImpl();
    return httpPut;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpDelete createHttpDelete()
  {
    HttpDeleteImpl httpDelete = new HttpDeleteImpl();
    return httpDelete;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpHeader createHttpHeader()
  {
    HttpHeaderImpl httpHeader = new HttpHeaderImpl();
    return httpHeader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UriVariables createUriVariables()
  {
    UriVariablesImpl uriVariables = new UriVariablesImpl();
    return uriVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QueryParam createQueryParam()
  {
    QueryParamImpl queryParam = new QueryParamImpl();
    return queryParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HttpBody createHttpBody()
  {
    HttpBodyImpl httpBody = new HttpBodyImpl();
    return httpBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturConditionFunction createPartiturConditionFunctionFromString(EDataType eDataType, String initialValue)
  {
    PartiturConditionFunction result = PartiturConditionFunction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPartiturConditionFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturCommandFunction createPartiturCommandFunctionFromString(EDataType eDataType, String initialValue)
  {
    PartiturCommandFunction result = PartiturCommandFunction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPartiturCommandFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType createEventTypeFromString(EDataType eDataType, String initialValue)
  {
    EventType result = EventType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PartiturPackage getPartiturPackage()
  {
    return (PartiturPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PartiturPackage getPackage()
  {
    return PartiturPackage.eINSTANCE;
  }

} //PartiturFactoryImpl
