/**
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.partitur;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Command Function</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see io.beethoven.partitur.partitur.PartiturPackage#getPartiturCommandFunction()
 * @model
 * @generated
 */
public enum PartiturCommandFunction implements Enumerator
{
  /**
   * The '<em><b>Start Task</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #START_TASK_VALUE
   * @generated
   * @ordered
   */
  START_TASK(0, "startTask", "startTask"),

  /**
   * The '<em><b>Start Workflow</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #START_WORKFLOW_VALUE
   * @generated
   * @ordered
   */
  START_WORKFLOW(1, "startWorkflow", "startWorkflow"),

  /**
   * The '<em><b>Stop Workflow</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #STOP_WORKFLOW_VALUE
   * @generated
   * @ordered
   */
  STOP_WORKFLOW(2, "stopWorkflow", "stopWorkflow"),

  /**
   * The '<em><b>Cancel Workflow</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CANCEL_WORKFLOW_VALUE
   * @generated
   * @ordered
   */
  CANCEL_WORKFLOW(3, "cancelWorkflow", "cancelWorkflow");

  /**
   * The '<em><b>Start Task</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Start Task</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #START_TASK
   * @model name="startTask"
   * @generated
   * @ordered
   */
  public static final int START_TASK_VALUE = 0;

  /**
   * The '<em><b>Start Workflow</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Start Workflow</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #START_WORKFLOW
   * @model name="startWorkflow"
   * @generated
   * @ordered
   */
  public static final int START_WORKFLOW_VALUE = 1;

  /**
   * The '<em><b>Stop Workflow</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Stop Workflow</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #STOP_WORKFLOW
   * @model name="stopWorkflow"
   * @generated
   * @ordered
   */
  public static final int STOP_WORKFLOW_VALUE = 2;

  /**
   * The '<em><b>Cancel Workflow</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Cancel Workflow</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CANCEL_WORKFLOW
   * @model name="cancelWorkflow"
   * @generated
   * @ordered
   */
  public static final int CANCEL_WORKFLOW_VALUE = 3;

  /**
   * An array of all the '<em><b>Command Function</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final PartiturCommandFunction[] VALUES_ARRAY =
    new PartiturCommandFunction[]
    {
      START_TASK,
      START_WORKFLOW,
      STOP_WORKFLOW,
      CANCEL_WORKFLOW,
    };

  /**
   * A public read-only list of all the '<em><b>Command Function</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<PartiturCommandFunction> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Command Function</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static PartiturCommandFunction get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      PartiturCommandFunction result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Command Function</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static PartiturCommandFunction getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      PartiturCommandFunction result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Command Function</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static PartiturCommandFunction get(int value)
  {
    switch (value)
    {
      case START_TASK_VALUE: return START_TASK;
      case START_WORKFLOW_VALUE: return START_WORKFLOW;
      case STOP_WORKFLOW_VALUE: return STOP_WORKFLOW;
      case CANCEL_WORKFLOW_VALUE: return CANCEL_WORKFLOW;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private PartiturCommandFunction(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //PartiturCommandFunction
