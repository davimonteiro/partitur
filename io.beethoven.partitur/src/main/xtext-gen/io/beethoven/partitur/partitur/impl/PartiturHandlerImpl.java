/**
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.partitur.impl;

import io.beethoven.partitur.partitur.EventType;
import io.beethoven.partitur.partitur.PartiturCommand;
import io.beethoven.partitur.partitur.PartiturCondition;
import io.beethoven.partitur.partitur.PartiturHandler;
import io.beethoven.partitur.partitur.PartiturPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Handler</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link io.beethoven.partitur.partitur.impl.PartiturHandlerImpl#getName <em>Name</em>}</li>
 *   <li>{@link io.beethoven.partitur.partitur.impl.PartiturHandlerImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link io.beethoven.partitur.partitur.impl.PartiturHandlerImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link io.beethoven.partitur.partitur.impl.PartiturHandlerImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PartiturHandlerImpl extends MinimalEObjectImpl.Container implements PartiturHandler
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected static final EventType EVENT_EDEFAULT = EventType.TASK_STARTED;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected EventType event = EVENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<PartiturCondition> conditions;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<PartiturCommand> commands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PartiturHandlerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PartiturPackage.Literals.PARTITUR_HANDLER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PartiturPackage.PARTITUR_HANDLER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventType getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvent(EventType newEvent)
  {
    EventType oldEvent = event;
    event = newEvent == null ? EVENT_EDEFAULT : newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PartiturPackage.PARTITUR_HANDLER__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PartiturCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<PartiturCondition>(PartiturCondition.class, this, PartiturPackage.PARTITUR_HANDLER__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<PartiturCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<PartiturCommand>(PartiturCommand.class, this, PartiturPackage.PARTITUR_HANDLER__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PartiturPackage.PARTITUR_HANDLER__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case PartiturPackage.PARTITUR_HANDLER__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PartiturPackage.PARTITUR_HANDLER__NAME:
        return getName();
      case PartiturPackage.PARTITUR_HANDLER__EVENT:
        return getEvent();
      case PartiturPackage.PARTITUR_HANDLER__CONDITIONS:
        return getConditions();
      case PartiturPackage.PARTITUR_HANDLER__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PartiturPackage.PARTITUR_HANDLER__NAME:
        setName((String)newValue);
        return;
      case PartiturPackage.PARTITUR_HANDLER__EVENT:
        setEvent((EventType)newValue);
        return;
      case PartiturPackage.PARTITUR_HANDLER__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends PartiturCondition>)newValue);
        return;
      case PartiturPackage.PARTITUR_HANDLER__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends PartiturCommand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PartiturPackage.PARTITUR_HANDLER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PartiturPackage.PARTITUR_HANDLER__EVENT:
        setEvent(EVENT_EDEFAULT);
        return;
      case PartiturPackage.PARTITUR_HANDLER__CONDITIONS:
        getConditions().clear();
        return;
      case PartiturPackage.PARTITUR_HANDLER__COMMANDS:
        getCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PartiturPackage.PARTITUR_HANDLER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PartiturPackage.PARTITUR_HANDLER__EVENT:
        return event != EVENT_EDEFAULT;
      case PartiturPackage.PARTITUR_HANDLER__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case PartiturPackage.PARTITUR_HANDLER__COMMANDS:
        return commands != null && !commands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", event: ");
    result.append(event);
    result.append(')');
    return result.toString();
  }

} //PartiturHandlerImpl
