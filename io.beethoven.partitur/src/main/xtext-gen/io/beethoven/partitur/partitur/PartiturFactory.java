/**
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.partitur;

import org.eclipse.emf.ecore.EFactory;

/**
 * <!-- begin-user-doc -->
 * The <b>Factory</b> for the model.
 * It provides a create method for each non-abstract class of the model.
 * <!-- end-user-doc -->
 * @see io.beethoven.partitur.partitur.PartiturPackage
 * @generated
 */
public interface PartiturFactory extends EFactory
{
  /**
   * The singleton instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  PartiturFactory eINSTANCE = io.beethoven.partitur.partitur.impl.PartiturFactoryImpl.init();

  /**
   * Returns a new object of class '<em>Workflow</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Workflow</em>'.
   * @generated
   */
  PartiturWorkflow createPartiturWorkflow();

  /**
   * Returns a new object of class '<em>Task</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Task</em>'.
   * @generated
   */
  PartiturTask createPartiturTask();

  /**
   * Returns a new object of class '<em>Handler</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Handler</em>'.
   * @generated
   */
  PartiturHandler createPartiturHandler();

  /**
   * Returns a new object of class '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Condition</em>'.
   * @generated
   */
  PartiturCondition createPartiturCondition();

  /**
   * Returns a new object of class '<em>Command</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Command</em>'.
   * @generated
   */
  PartiturCommand createPartiturCommand();

  /**
   * Returns a new object of class '<em>Http Get</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Http Get</em>'.
   * @generated
   */
  HttpGet createHttpGet();

  /**
   * Returns a new object of class '<em>Http Post</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Http Post</em>'.
   * @generated
   */
  HttpPost createHttpPost();

  /**
   * Returns a new object of class '<em>Http Put</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Http Put</em>'.
   * @generated
   */
  HttpPut createHttpPut();

  /**
   * Returns a new object of class '<em>Http Delete</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Http Delete</em>'.
   * @generated
   */
  HttpDelete createHttpDelete();

  /**
   * Returns a new object of class '<em>Http Header</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Http Header</em>'.
   * @generated
   */
  HttpHeader createHttpHeader();

  /**
   * Returns a new object of class '<em>Uri Variables</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Uri Variables</em>'.
   * @generated
   */
  UriVariables createUriVariables();

  /**
   * Returns a new object of class '<em>Query Param</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Query Param</em>'.
   * @generated
   */
  QueryParam createQueryParam();

  /**
   * Returns a new object of class '<em>Http Body</em>'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return a new object of class '<em>Http Body</em>'.
   * @generated
   */
  HttpBody createHttpBody();

  /**
   * Returns the package supported by this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the package supported by this factory.
   * @generated
   */
  PartiturPackage getPartiturPackage();

} //PartiturFactory
