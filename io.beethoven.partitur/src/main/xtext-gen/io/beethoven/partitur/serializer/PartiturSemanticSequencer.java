/*
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.serializer;

import com.google.inject.Inject;
import io.beethoven.partitur.partitur.HttpBody;
import io.beethoven.partitur.partitur.HttpDelete;
import io.beethoven.partitur.partitur.HttpGet;
import io.beethoven.partitur.partitur.HttpHeader;
import io.beethoven.partitur.partitur.HttpPost;
import io.beethoven.partitur.partitur.HttpPut;
import io.beethoven.partitur.partitur.PartiturCommand;
import io.beethoven.partitur.partitur.PartiturCondition;
import io.beethoven.partitur.partitur.PartiturHandler;
import io.beethoven.partitur.partitur.PartiturPackage;
import io.beethoven.partitur.partitur.PartiturTask;
import io.beethoven.partitur.partitur.PartiturWorkflow;
import io.beethoven.partitur.partitur.QueryParam;
import io.beethoven.partitur.partitur.UriVariables;
import io.beethoven.partitur.services.PartiturGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PartiturSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PartiturGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PartiturPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PartiturPackage.HTTP_BODY:
				sequence_HttpBody(context, (HttpBody) semanticObject); 
				return; 
			case PartiturPackage.HTTP_DELETE:
				sequence_HttpDelete(context, (HttpDelete) semanticObject); 
				return; 
			case PartiturPackage.HTTP_GET:
				sequence_HttpGet(context, (HttpGet) semanticObject); 
				return; 
			case PartiturPackage.HTTP_HEADER:
				sequence_HttpHeader(context, (HttpHeader) semanticObject); 
				return; 
			case PartiturPackage.HTTP_POST:
				sequence_HttpPost(context, (HttpPost) semanticObject); 
				return; 
			case PartiturPackage.HTTP_PUT:
				sequence_HttpPut(context, (HttpPut) semanticObject); 
				return; 
			case PartiturPackage.PARTITUR_COMMAND:
				sequence_PartiturCommand(context, (PartiturCommand) semanticObject); 
				return; 
			case PartiturPackage.PARTITUR_CONDITION:
				sequence_PartiturCondition(context, (PartiturCondition) semanticObject); 
				return; 
			case PartiturPackage.PARTITUR_HANDLER:
				sequence_PartiturHandler(context, (PartiturHandler) semanticObject); 
				return; 
			case PartiturPackage.PARTITUR_TASK:
				sequence_PartiturTask(context, (PartiturTask) semanticObject); 
				return; 
			case PartiturPackage.PARTITUR_WORKFLOW:
				sequence_PartiturWorkflow(context, (PartiturWorkflow) semanticObject); 
				return; 
			case PartiturPackage.QUERY_PARAM:
				sequence_QueryParam(context, (QueryParam) semanticObject); 
				return; 
			case PartiturPackage.URI_VARIABLES:
				sequence_UriVariables(context, (UriVariables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HttpBody returns HttpBody
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_HttpBody(ISerializationContext context, HttpBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.HTTP_BODY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.HTTP_BODY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpBodyAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HttpDelete returns HttpDelete
	 *
	 * Constraint:
	 *     (url=STRING uriVariables=UriVariables? headers+=HttpHeader*)
	 */
	protected void sequence_HttpDelete(ISerializationContext context, HttpDelete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpGet returns HttpGet
	 *
	 * Constraint:
	 *     (url=STRING uriVariables=UriVariables? headers+=HttpHeader* params+=QueryParam*)
	 */
	protected void sequence_HttpGet(ISerializationContext context, HttpGet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpHeader returns HttpHeader
	 *
	 * Constraint:
	 *     (name=STRING value=STRING)
	 */
	protected void sequence_HttpHeader(ISerializationContext context, HttpHeader semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.HTTP_HEADER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.HTTP_HEADER__NAME));
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.HTTP_HEADER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.HTTP_HEADER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpHeaderAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHttpHeaderAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HttpPost returns HttpPost
	 *
	 * Constraint:
	 *     (url=STRING uriVariables=UriVariables? headers+=HttpHeader* body=HttpBody?)
	 */
	protected void sequence_HttpPost(ISerializationContext context, HttpPost semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpPut returns HttpPut
	 *
	 * Constraint:
	 *     (url=STRING uriVariables=UriVariables? headers+=HttpHeader* body=HttpBody?)
	 */
	protected void sequence_HttpPut(ISerializationContext context, HttpPut semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PartiturCommand returns PartiturCommand
	 *
	 * Constraint:
	 *     (commandFunction=PartiturCommandFunction arg=STRING)
	 */
	protected void sequence_PartiturCommand(ISerializationContext context, PartiturCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.PARTITUR_COMMAND__COMMAND_FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.PARTITUR_COMMAND__COMMAND_FUNCTION));
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.PARTITUR_COMMAND__ARG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.PARTITUR_COMMAND__ARG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartiturCommandAccess().getCommandFunctionPartiturCommandFunctionEnumRuleCall_0_0(), semanticObject.getCommandFunction());
		feeder.accept(grammarAccess.getPartiturCommandAccess().getArgSTRINGTerminalRuleCall_2_0(), semanticObject.getArg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PartiturCondition returns PartiturCondition
	 *
	 * Constraint:
	 *     (conditionFunction=PartiturConditionFunction arg=STRING)
	 */
	protected void sequence_PartiturCondition(ISerializationContext context, PartiturCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.PARTITUR_CONDITION__CONDITION_FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.PARTITUR_CONDITION__CONDITION_FUNCTION));
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.PARTITUR_CONDITION__ARG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.PARTITUR_CONDITION__ARG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPartiturConditionAccess().getConditionFunctionPartiturConditionFunctionEnumRuleCall_0_0(), semanticObject.getConditionFunction());
		feeder.accept(grammarAccess.getPartiturConditionAccess().getArgSTRINGTerminalRuleCall_2_0(), semanticObject.getArg());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PartiturHandler returns PartiturHandler
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         event=EventType 
	 *         conditions+=PartiturCondition 
	 *         conditions+=PartiturCondition* 
	 *         commands+=PartiturCommand 
	 *         commands+=PartiturCommand*
	 *     )
	 */
	protected void sequence_PartiturHandler(ISerializationContext context, PartiturHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PartiturTask returns PartiturTask
	 *
	 * Constraint:
	 *     (name=ID (partiturHttpRequest=HttpGet | partiturHttpRequest=HttpPost | partiturHttpRequest=HttpPut | partiturHttpRequest=HttpDelete))
	 */
	protected void sequence_PartiturTask(ISerializationContext context, PartiturTask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PartiturWorkflow returns PartiturWorkflow
	 *
	 * Constraint:
	 *     (name=ID tasks+=PartiturTask* handlers+=PartiturHandler*)
	 */
	protected void sequence_PartiturWorkflow(ISerializationContext context, PartiturWorkflow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryParam returns QueryParam
	 *
	 * Constraint:
	 *     (name=STRING value=STRING)
	 */
	protected void sequence_QueryParam(ISerializationContext context, QueryParam semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.QUERY_PARAM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.QUERY_PARAM__NAME));
			if (transientValues.isValueTransient(semanticObject, PartiturPackage.Literals.QUERY_PARAM__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PartiturPackage.Literals.QUERY_PARAM__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQueryParamAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getQueryParamAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UriVariables returns UriVariables
	 *
	 * Constraint:
	 *     (values+=STRING values+=STRING*)
	 */
	protected void sequence_UriVariables(ISerializationContext context, UriVariables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
