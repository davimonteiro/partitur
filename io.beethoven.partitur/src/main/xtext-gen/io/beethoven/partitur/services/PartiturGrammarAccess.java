/*
 * generated by Xtext 2.12.0
 */
package io.beethoven.partitur.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PartiturGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PartiturWorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturWorkflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTasksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTasksPartiturTaskParserRuleCall_3_0 = (RuleCall)cTasksAssignment_3.eContents().get(0);
		private final Assignment cHandlersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHandlersPartiturHandlerParserRuleCall_4_0 = (RuleCall)cHandlersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PartiturWorkflow:
		//	'workflow' name=ID '{'
		//	tasks+=PartiturTask*
		//	handlers+=PartiturHandler*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow' name=ID '{' tasks+=PartiturTask* handlers+=PartiturHandler* '}'
		public Group getGroup() { return cGroup; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tasks+=PartiturTask*
		public Assignment getTasksAssignment_3() { return cTasksAssignment_3; }
		
		//PartiturTask
		public RuleCall getTasksPartiturTaskParserRuleCall_3_0() { return cTasksPartiturTaskParserRuleCall_3_0; }
		
		//handlers+=PartiturHandler*
		public Assignment getHandlersAssignment_4() { return cHandlersAssignment_4; }
		
		//PartiturHandler
		public RuleCall getHandlersPartiturHandlerParserRuleCall_4_0() { return cHandlersPartiturHandlerParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PartiturTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cPartiturHttpRequestAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPartiturHttpRequestHttpGetParserRuleCall_3_0_0 = (RuleCall)cPartiturHttpRequestAssignment_3_0.eContents().get(0);
		private final Assignment cPartiturHttpRequestAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPartiturHttpRequestHttpPostParserRuleCall_3_1_0 = (RuleCall)cPartiturHttpRequestAssignment_3_1.eContents().get(0);
		private final Assignment cPartiturHttpRequestAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cPartiturHttpRequestHttpPutParserRuleCall_3_2_0 = (RuleCall)cPartiturHttpRequestAssignment_3_2.eContents().get(0);
		private final Assignment cPartiturHttpRequestAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cPartiturHttpRequestHttpDeleteParserRuleCall_3_3_0 = (RuleCall)cPartiturHttpRequestAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PartiturTask:
		//	'task' name=ID '{' (partiturHttpRequest=HttpGet | partiturHttpRequest=HttpPost | partiturHttpRequest=HttpPut |
		//	partiturHttpRequest=HttpDelete)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=ID '{' (partiturHttpRequest=HttpGet | partiturHttpRequest=HttpPost | partiturHttpRequest=HttpPut |
		//partiturHttpRequest=HttpDelete) '}'
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//partiturHttpRequest=HttpGet | partiturHttpRequest=HttpPost | partiturHttpRequest=HttpPut |
		//partiturHttpRequest=HttpDelete
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//partiturHttpRequest=HttpGet
		public Assignment getPartiturHttpRequestAssignment_3_0() { return cPartiturHttpRequestAssignment_3_0; }
		
		//HttpGet
		public RuleCall getPartiturHttpRequestHttpGetParserRuleCall_3_0_0() { return cPartiturHttpRequestHttpGetParserRuleCall_3_0_0; }
		
		//partiturHttpRequest=HttpPost
		public Assignment getPartiturHttpRequestAssignment_3_1() { return cPartiturHttpRequestAssignment_3_1; }
		
		//HttpPost
		public RuleCall getPartiturHttpRequestHttpPostParserRuleCall_3_1_0() { return cPartiturHttpRequestHttpPostParserRuleCall_3_1_0; }
		
		//partiturHttpRequest=HttpPut
		public Assignment getPartiturHttpRequestAssignment_3_2() { return cPartiturHttpRequestAssignment_3_2; }
		
		//HttpPut
		public RuleCall getPartiturHttpRequestHttpPutParserRuleCall_3_2_0() { return cPartiturHttpRequestHttpPutParserRuleCall_3_2_0; }
		
		//partiturHttpRequest=HttpDelete
		public Assignment getPartiturHttpRequestAssignment_3_3() { return cPartiturHttpRequestAssignment_3_3; }
		
		//HttpDelete
		public RuleCall getPartiturHttpRequestHttpDeleteParserRuleCall_3_3_0() { return cPartiturHttpRequestHttpDeleteParserRuleCall_3_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PartiturHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventEventTypeEnumRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Keyword cWhenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsPartiturConditionParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConditionsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cConditionsPartiturConditionParserRuleCall_7_1_0 = (RuleCall)cConditionsAssignment_7_1.eContents().get(0);
		private final Keyword cThenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cCommandsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCommandsPartiturCommandParserRuleCall_9_0 = (RuleCall)cCommandsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cCommandsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cCommandsPartiturCommandParserRuleCall_10_1_0 = (RuleCall)cCommandsAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//PartiturHandler:
		//	'handler' name=ID '{'
		//	'on' event=EventType 'when' conditions+=PartiturCondition (',' conditions+=PartiturCondition)*
		//	'then' commands+=PartiturCommand (',' commands+=PartiturCommand)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'handler' name=ID '{' 'on' event=EventType 'when' conditions+=PartiturCondition (',' conditions+=PartiturCondition)*
		//'then' commands+=PartiturCommand (',' commands+=PartiturCommand)* '}'
		public Group getGroup() { return cGroup; }
		
		//'handler'
		public Keyword getHandlerKeyword_0() { return cHandlerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//event=EventType
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//EventType
		public RuleCall getEventEventTypeEnumRuleCall_4_0() { return cEventEventTypeEnumRuleCall_4_0; }
		
		//'when'
		public Keyword getWhenKeyword_5() { return cWhenKeyword_5; }
		
		//conditions+=PartiturCondition
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }
		
		//PartiturCondition
		public RuleCall getConditionsPartiturConditionParserRuleCall_6_0() { return cConditionsPartiturConditionParserRuleCall_6_0; }
		
		//(',' conditions+=PartiturCondition)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//conditions+=PartiturCondition
		public Assignment getConditionsAssignment_7_1() { return cConditionsAssignment_7_1; }
		
		//PartiturCondition
		public RuleCall getConditionsPartiturConditionParserRuleCall_7_1_0() { return cConditionsPartiturConditionParserRuleCall_7_1_0; }
		
		//'then'
		public Keyword getThenKeyword_8() { return cThenKeyword_8; }
		
		//commands+=PartiturCommand
		public Assignment getCommandsAssignment_9() { return cCommandsAssignment_9; }
		
		//PartiturCommand
		public RuleCall getCommandsPartiturCommandParserRuleCall_9_0() { return cCommandsPartiturCommandParserRuleCall_9_0; }
		
		//(',' commands+=PartiturCommand)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//commands+=PartiturCommand
		public Assignment getCommandsAssignment_10_1() { return cCommandsAssignment_10_1; }
		
		//PartiturCommand
		public RuleCall getCommandsPartiturCommandParserRuleCall_10_1_0() { return cCommandsPartiturCommandParserRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class PartiturConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionFunctionPartiturConditionFunctionEnumRuleCall_0_0 = (RuleCall)cConditionFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgSTRINGTerminalRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PartiturCondition:
		//	conditionFunction=PartiturConditionFunction '(' arg=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//conditionFunction=PartiturConditionFunction '(' arg=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//conditionFunction=PartiturConditionFunction
		public Assignment getConditionFunctionAssignment_0() { return cConditionFunctionAssignment_0; }
		
		//PartiturConditionFunction
		public RuleCall getConditionFunctionPartiturConditionFunctionEnumRuleCall_0_0() { return cConditionFunctionPartiturConditionFunctionEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arg=STRING
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }
		
		//STRING
		public RuleCall getArgSTRINGTerminalRuleCall_2_0() { return cArgSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PartiturCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandFunctionPartiturCommandFunctionEnumRuleCall_0_0 = (RuleCall)cCommandFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgSTRINGTerminalRuleCall_2_0 = (RuleCall)cArgAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PartiturCommand:
		//	commandFunction=PartiturCommandFunction '(' arg=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//commandFunction=PartiturCommandFunction '(' arg=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//commandFunction=PartiturCommandFunction
		public Assignment getCommandFunctionAssignment_0() { return cCommandFunctionAssignment_0; }
		
		//PartiturCommandFunction
		public RuleCall getCommandFunctionPartiturCommandFunctionEnumRuleCall_0_0() { return cCommandFunctionPartiturCommandFunctionEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//arg=STRING
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }
		
		//STRING
		public RuleCall getArgSTRINGTerminalRuleCall_2_0() { return cArgSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class HttpGetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.HttpGet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUriVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUriVariablesUriVariablesParserRuleCall_4_0 = (RuleCall)cUriVariablesAssignment_4.eContents().get(0);
		private final Assignment cHeadersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHeadersHttpHeaderParserRuleCall_5_0 = (RuleCall)cHeadersAssignment_5.eContents().get(0);
		private final Assignment cParamsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParamsQueryParamParserRuleCall_6_0 = (RuleCall)cParamsAssignment_6.eContents().get(0);
		
		///********************************   HTTP Requests   ********************************/ HttpGet:
		//	'get' '(' url=STRING ')'
		//	uriVariables=UriVariables?
		//	headers+=HttpHeader*
		//	params+=QueryParam*;
		@Override public ParserRule getRule() { return rule; }
		
		//'get' '(' url=STRING ')' uriVariables=UriVariables? headers+=HttpHeader* params+=QueryParam*
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//uriVariables=UriVariables?
		public Assignment getUriVariablesAssignment_4() { return cUriVariablesAssignment_4; }
		
		//UriVariables
		public RuleCall getUriVariablesUriVariablesParserRuleCall_4_0() { return cUriVariablesUriVariablesParserRuleCall_4_0; }
		
		//headers+=HttpHeader*
		public Assignment getHeadersAssignment_5() { return cHeadersAssignment_5; }
		
		//HttpHeader
		public RuleCall getHeadersHttpHeaderParserRuleCall_5_0() { return cHeadersHttpHeaderParserRuleCall_5_0; }
		
		//params+=QueryParam*
		public Assignment getParamsAssignment_6() { return cParamsAssignment_6; }
		
		//QueryParam
		public RuleCall getParamsQueryParamParserRuleCall_6_0() { return cParamsQueryParamParserRuleCall_6_0; }
	}
	public class HttpPostElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.HttpPost");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUriVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUriVariablesUriVariablesParserRuleCall_4_0 = (RuleCall)cUriVariablesAssignment_4.eContents().get(0);
		private final Assignment cHeadersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHeadersHttpHeaderParserRuleCall_5_0 = (RuleCall)cHeadersAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyHttpBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//HttpPost:
		//	'post' '(' url=STRING ')'
		//	uriVariables=UriVariables?
		//	headers+=HttpHeader*
		//	body=HttpBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//'post' '(' url=STRING ')' uriVariables=UriVariables? headers+=HttpHeader* body=HttpBody?
		public Group getGroup() { return cGroup; }
		
		//'post'
		public Keyword getPostKeyword_0() { return cPostKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//uriVariables=UriVariables?
		public Assignment getUriVariablesAssignment_4() { return cUriVariablesAssignment_4; }
		
		//UriVariables
		public RuleCall getUriVariablesUriVariablesParserRuleCall_4_0() { return cUriVariablesUriVariablesParserRuleCall_4_0; }
		
		//headers+=HttpHeader*
		public Assignment getHeadersAssignment_5() { return cHeadersAssignment_5; }
		
		//HttpHeader
		public RuleCall getHeadersHttpHeaderParserRuleCall_5_0() { return cHeadersHttpHeaderParserRuleCall_5_0; }
		
		//body=HttpBody?
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//HttpBody
		public RuleCall getBodyHttpBodyParserRuleCall_6_0() { return cBodyHttpBodyParserRuleCall_6_0; }
	}
	public class HttpPutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.HttpPut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUriVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUriVariablesUriVariablesParserRuleCall_4_0 = (RuleCall)cUriVariablesAssignment_4.eContents().get(0);
		private final Assignment cHeadersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHeadersHttpHeaderParserRuleCall_5_0 = (RuleCall)cHeadersAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyHttpBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//HttpPut:
		//	'put' '(' url=STRING ')'
		//	uriVariables=UriVariables?
		//	headers+=HttpHeader*
		//	body=HttpBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//'put' '(' url=STRING ')' uriVariables=UriVariables? headers+=HttpHeader* body=HttpBody?
		public Group getGroup() { return cGroup; }
		
		//'put'
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//uriVariables=UriVariables?
		public Assignment getUriVariablesAssignment_4() { return cUriVariablesAssignment_4; }
		
		//UriVariables
		public RuleCall getUriVariablesUriVariablesParserRuleCall_4_0() { return cUriVariablesUriVariablesParserRuleCall_4_0; }
		
		//headers+=HttpHeader*
		public Assignment getHeadersAssignment_5() { return cHeadersAssignment_5; }
		
		//HttpHeader
		public RuleCall getHeadersHttpHeaderParserRuleCall_5_0() { return cHeadersHttpHeaderParserRuleCall_5_0; }
		
		//body=HttpBody?
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//HttpBody
		public RuleCall getBodyHttpBodyParserRuleCall_6_0() { return cBodyHttpBodyParserRuleCall_6_0; }
	}
	public class HttpDeleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.HttpDelete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0 = (RuleCall)cUrlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUriVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUriVariablesUriVariablesParserRuleCall_4_0 = (RuleCall)cUriVariablesAssignment_4.eContents().get(0);
		private final Assignment cHeadersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHeadersHttpHeaderParserRuleCall_5_0 = (RuleCall)cHeadersAssignment_5.eContents().get(0);
		
		//HttpDelete:
		//	'delete' '(' url=STRING ')'
		//	uriVariables=UriVariables?
		//	headers+=HttpHeader*;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' '(' url=STRING ')' uriVariables=UriVariables? headers+=HttpHeader*
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_2() { return cUrlAssignment_2; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0() { return cUrlSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//uriVariables=UriVariables?
		public Assignment getUriVariablesAssignment_4() { return cUriVariablesAssignment_4; }
		
		//UriVariables
		public RuleCall getUriVariablesUriVariablesParserRuleCall_4_0() { return cUriVariablesUriVariablesParserRuleCall_4_0; }
		
		//headers+=HttpHeader*
		public Assignment getHeadersAssignment_5() { return cHeadersAssignment_5; }
		
		//HttpHeader
		public RuleCall getHeadersHttpHeaderParserRuleCall_5_0() { return cHeadersHttpHeaderParserRuleCall_5_0; }
	}
	public class HttpHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.HttpHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeaderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///********************************   HTTP Requests   ********************************/ HttpHeader:
		//	'.header(' name=STRING ',' value=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.header(' name=STRING ',' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'.header('
		public Keyword getHeaderKeyword_0() { return cHeaderKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class UriVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.UriVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUriVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UriVariables:
		//	'.uriVariables(' values+=STRING (',' values+=STRING)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.uriVariables(' values+=STRING (',' values+=STRING)* ')'
		public Group getGroup() { return cGroup; }
		
		//'.uriVariables('
		public Keyword getUriVariablesKeyword_0() { return cUriVariablesKeyword_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0() { return cValuesSTRINGTerminalRuleCall_1_0; }
		
		//(',' values+=STRING)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=STRING
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_1_0() { return cValuesSTRINGTerminalRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class QueryParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.QueryParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryParamsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QueryParam:
		//	'.queryParams(' name=STRING ',' value=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.queryParams(' name=STRING ',' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'.queryParams('
		public Keyword getQueryParamsKeyword_0() { return cQueryParamsKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class HttpBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.HttpBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBodyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HttpBody:
		//	'.body(' value=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.body(' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'.body('
		public Keyword getBodyKeyword_0() { return cBodyKeyword_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	public class PartiturConditionFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturConditionFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTaskNameEqualsToEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTaskNameEqualsToTaskNameEqualsToKeyword_0_0 = (Keyword)cTaskNameEqualsToEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTaskResponseEqualsToEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTaskResponseEqualsToTaskResponseEqualsToKeyword_1_0 = (Keyword)cTaskResponseEqualsToEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWorkflowNameEqualsToEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWorkflowNameEqualsToWorkflowNameEqualsToKeyword_2_0 = (Keyword)cWorkflowNameEqualsToEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PartiturConditionFunction:
		//	taskNameEqualsTo |
		//	taskResponseEqualsTo |
		//	workflowNameEqualsTo;
		public EnumRule getRule() { return rule; }
		
		//taskNameEqualsTo | taskResponseEqualsTo | workflowNameEqualsTo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//taskNameEqualsTo
		public EnumLiteralDeclaration getTaskNameEqualsToEnumLiteralDeclaration_0() { return cTaskNameEqualsToEnumLiteralDeclaration_0; }
		
		//'taskNameEqualsTo'
		public Keyword getTaskNameEqualsToTaskNameEqualsToKeyword_0_0() { return cTaskNameEqualsToTaskNameEqualsToKeyword_0_0; }
		
		//taskResponseEqualsTo
		public EnumLiteralDeclaration getTaskResponseEqualsToEnumLiteralDeclaration_1() { return cTaskResponseEqualsToEnumLiteralDeclaration_1; }
		
		//'taskResponseEqualsTo'
		public Keyword getTaskResponseEqualsToTaskResponseEqualsToKeyword_1_0() { return cTaskResponseEqualsToTaskResponseEqualsToKeyword_1_0; }
		
		//workflowNameEqualsTo
		public EnumLiteralDeclaration getWorkflowNameEqualsToEnumLiteralDeclaration_2() { return cWorkflowNameEqualsToEnumLiteralDeclaration_2; }
		
		//'workflowNameEqualsTo'
		public Keyword getWorkflowNameEqualsToWorkflowNameEqualsToKeyword_2_0() { return cWorkflowNameEqualsToWorkflowNameEqualsToKeyword_2_0; }
	}
	public class PartiturCommandFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.PartiturCommandFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartTaskEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartTaskStartTaskKeyword_0_0 = (Keyword)cStartTaskEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStartWorkflowEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStartWorkflowStartWorkflowKeyword_1_0 = (Keyword)cStartWorkflowEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStopWorkflowEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStopWorkflowStopWorkflowKeyword_2_0 = (Keyword)cStopWorkflowEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCancelWorkflowEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCancelWorkflowCancelWorkflowKeyword_3_0 = (Keyword)cCancelWorkflowEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PartiturCommandFunction:
		//	startTask |
		//	startWorkflow |
		//	stopWorkflow |
		//	cancelWorkflow;
		public EnumRule getRule() { return rule; }
		
		//startTask | startWorkflow | stopWorkflow | cancelWorkflow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startTask
		public EnumLiteralDeclaration getStartTaskEnumLiteralDeclaration_0() { return cStartTaskEnumLiteralDeclaration_0; }
		
		//'startTask'
		public Keyword getStartTaskStartTaskKeyword_0_0() { return cStartTaskStartTaskKeyword_0_0; }
		
		//startWorkflow
		public EnumLiteralDeclaration getStartWorkflowEnumLiteralDeclaration_1() { return cStartWorkflowEnumLiteralDeclaration_1; }
		
		//'startWorkflow'
		public Keyword getStartWorkflowStartWorkflowKeyword_1_0() { return cStartWorkflowStartWorkflowKeyword_1_0; }
		
		//stopWorkflow
		public EnumLiteralDeclaration getStopWorkflowEnumLiteralDeclaration_2() { return cStopWorkflowEnumLiteralDeclaration_2; }
		
		//'stopWorkflow'
		public Keyword getStopWorkflowStopWorkflowKeyword_2_0() { return cStopWorkflowStopWorkflowKeyword_2_0; }
		
		//cancelWorkflow
		public EnumLiteralDeclaration getCancelWorkflowEnumLiteralDeclaration_3() { return cCancelWorkflowEnumLiteralDeclaration_3; }
		
		//'cancelWorkflow'
		public Keyword getCancelWorkflowCancelWorkflowKeyword_3_0() { return cCancelWorkflowCancelWorkflowKeyword_3_0; }
	}
	public class EventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.beethoven.partitur.Partitur.EventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTASK_STARTEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTASK_STARTEDTASK_STARTEDKeyword_0_0 = (Keyword)cTASK_STARTEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTASK_COMPLETEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTASK_COMPLETEDTASK_COMPLETEDKeyword_1_0 = (Keyword)cTASK_COMPLETEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTASK_TIMEDOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTASK_TIMEDOUTTASK_TIMEDOUTKeyword_2_0 = (Keyword)cTASK_TIMEDOUTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTASK_FAILEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTASK_FAILEDTASK_FAILEDKeyword_3_0 = (Keyword)cTASK_FAILEDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWORKFLOW_SCHEDULEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWORKFLOW_SCHEDULEDWORKFLOW_SCHEDULEDKeyword_4_0 = (Keyword)cWORKFLOW_SCHEDULEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWORKFLOW_STARTEDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWORKFLOW_STARTEDWORKFLOW_STARTEDKeyword_5_0 = (Keyword)cWORKFLOW_STARTEDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWORKFLOW_COMPLETEDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWORKFLOW_COMPLETEDWORKFLOW_COMPLETEDKeyword_6_0 = (Keyword)cWORKFLOW_COMPLETEDEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum EventType: // Task events
		//	TASK_STARTED | TASK_COMPLETED | TASK_TIMEDOUT | TASK_FAILED | // Workflow events
		//	WORKFLOW_SCHEDULED | WORKFLOW_STARTED | WORKFLOW_COMPLETED;
		public EnumRule getRule() { return rule; }
		
		//// Task events
		//TASK_STARTED | TASK_COMPLETED | TASK_TIMEDOUT | TASK_FAILED | // Workflow events
		//WORKFLOW_SCHEDULED | WORKFLOW_STARTED | WORKFLOW_COMPLETED
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// Task events
		//TASK_STARTED
		public EnumLiteralDeclaration getTASK_STARTEDEnumLiteralDeclaration_0() { return cTASK_STARTEDEnumLiteralDeclaration_0; }
		
		//"TASK_STARTED"
		public Keyword getTASK_STARTEDTASK_STARTEDKeyword_0_0() { return cTASK_STARTEDTASK_STARTEDKeyword_0_0; }
		
		//TASK_COMPLETED
		public EnumLiteralDeclaration getTASK_COMPLETEDEnumLiteralDeclaration_1() { return cTASK_COMPLETEDEnumLiteralDeclaration_1; }
		
		//"TASK_COMPLETED"
		public Keyword getTASK_COMPLETEDTASK_COMPLETEDKeyword_1_0() { return cTASK_COMPLETEDTASK_COMPLETEDKeyword_1_0; }
		
		//TASK_TIMEDOUT
		public EnumLiteralDeclaration getTASK_TIMEDOUTEnumLiteralDeclaration_2() { return cTASK_TIMEDOUTEnumLiteralDeclaration_2; }
		
		//"TASK_TIMEDOUT"
		public Keyword getTASK_TIMEDOUTTASK_TIMEDOUTKeyword_2_0() { return cTASK_TIMEDOUTTASK_TIMEDOUTKeyword_2_0; }
		
		//TASK_FAILED
		public EnumLiteralDeclaration getTASK_FAILEDEnumLiteralDeclaration_3() { return cTASK_FAILEDEnumLiteralDeclaration_3; }
		
		//"TASK_FAILED"
		public Keyword getTASK_FAILEDTASK_FAILEDKeyword_3_0() { return cTASK_FAILEDTASK_FAILEDKeyword_3_0; }
		
		//// Workflow events
		//WORKFLOW_SCHEDULED
		public EnumLiteralDeclaration getWORKFLOW_SCHEDULEDEnumLiteralDeclaration_4() { return cWORKFLOW_SCHEDULEDEnumLiteralDeclaration_4; }
		
		//"WORKFLOW_SCHEDULED"
		public Keyword getWORKFLOW_SCHEDULEDWORKFLOW_SCHEDULEDKeyword_4_0() { return cWORKFLOW_SCHEDULEDWORKFLOW_SCHEDULEDKeyword_4_0; }
		
		//WORKFLOW_STARTED
		public EnumLiteralDeclaration getWORKFLOW_STARTEDEnumLiteralDeclaration_5() { return cWORKFLOW_STARTEDEnumLiteralDeclaration_5; }
		
		//"WORKFLOW_STARTED"
		public Keyword getWORKFLOW_STARTEDWORKFLOW_STARTEDKeyword_5_0() { return cWORKFLOW_STARTEDWORKFLOW_STARTEDKeyword_5_0; }
		
		//WORKFLOW_COMPLETED
		public EnumLiteralDeclaration getWORKFLOW_COMPLETEDEnumLiteralDeclaration_6() { return cWORKFLOW_COMPLETEDEnumLiteralDeclaration_6; }
		
		//"WORKFLOW_COMPLETED"
		public Keyword getWORKFLOW_COMPLETEDWORKFLOW_COMPLETEDKeyword_6_0() { return cWORKFLOW_COMPLETEDWORKFLOW_COMPLETEDKeyword_6_0; }
	}
	
	private final PartiturWorkflowElements pPartiturWorkflow;
	private final PartiturTaskElements pPartiturTask;
	private final PartiturHandlerElements pPartiturHandler;
	private final PartiturConditionElements pPartiturCondition;
	private final PartiturConditionFunctionElements ePartiturConditionFunction;
	private final PartiturCommandElements pPartiturCommand;
	private final PartiturCommandFunctionElements ePartiturCommandFunction;
	private final EventTypeElements eEventType;
	private final HttpGetElements pHttpGet;
	private final HttpPostElements pHttpPost;
	private final HttpPutElements pHttpPut;
	private final HttpDeleteElements pHttpDelete;
	private final HttpHeaderElements pHttpHeader;
	private final UriVariablesElements pUriVariables;
	private final QueryParamElements pQueryParam;
	private final HttpBodyElements pHttpBody;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PartiturGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPartiturWorkflow = new PartiturWorkflowElements();
		this.pPartiturTask = new PartiturTaskElements();
		this.pPartiturHandler = new PartiturHandlerElements();
		this.pPartiturCondition = new PartiturConditionElements();
		this.ePartiturConditionFunction = new PartiturConditionFunctionElements();
		this.pPartiturCommand = new PartiturCommandElements();
		this.ePartiturCommandFunction = new PartiturCommandFunctionElements();
		this.eEventType = new EventTypeElements();
		this.pHttpGet = new HttpGetElements();
		this.pHttpPost = new HttpPostElements();
		this.pHttpPut = new HttpPutElements();
		this.pHttpDelete = new HttpDeleteElements();
		this.pHttpHeader = new HttpHeaderElements();
		this.pUriVariables = new UriVariablesElements();
		this.pQueryParam = new QueryParamElements();
		this.pHttpBody = new HttpBodyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.beethoven.partitur.Partitur".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PartiturWorkflow:
	//	'workflow' name=ID '{'
	//	tasks+=PartiturTask*
	//	handlers+=PartiturHandler*
	//	'}';
	public PartiturWorkflowElements getPartiturWorkflowAccess() {
		return pPartiturWorkflow;
	}
	
	public ParserRule getPartiturWorkflowRule() {
		return getPartiturWorkflowAccess().getRule();
	}
	
	//PartiturTask:
	//	'task' name=ID '{' (partiturHttpRequest=HttpGet | partiturHttpRequest=HttpPost | partiturHttpRequest=HttpPut |
	//	partiturHttpRequest=HttpDelete)
	//	'}';
	public PartiturTaskElements getPartiturTaskAccess() {
		return pPartiturTask;
	}
	
	public ParserRule getPartiturTaskRule() {
		return getPartiturTaskAccess().getRule();
	}
	
	//PartiturHandler:
	//	'handler' name=ID '{'
	//	'on' event=EventType 'when' conditions+=PartiturCondition (',' conditions+=PartiturCondition)*
	//	'then' commands+=PartiturCommand (',' commands+=PartiturCommand)*
	//	'}';
	public PartiturHandlerElements getPartiturHandlerAccess() {
		return pPartiturHandler;
	}
	
	public ParserRule getPartiturHandlerRule() {
		return getPartiturHandlerAccess().getRule();
	}
	
	//PartiturCondition:
	//	conditionFunction=PartiturConditionFunction '(' arg=STRING ')';
	public PartiturConditionElements getPartiturConditionAccess() {
		return pPartiturCondition;
	}
	
	public ParserRule getPartiturConditionRule() {
		return getPartiturConditionAccess().getRule();
	}
	
	//enum PartiturConditionFunction:
	//	taskNameEqualsTo |
	//	taskResponseEqualsTo |
	//	workflowNameEqualsTo;
	public PartiturConditionFunctionElements getPartiturConditionFunctionAccess() {
		return ePartiturConditionFunction;
	}
	
	public EnumRule getPartiturConditionFunctionRule() {
		return getPartiturConditionFunctionAccess().getRule();
	}
	
	//PartiturCommand:
	//	commandFunction=PartiturCommandFunction '(' arg=STRING ')';
	public PartiturCommandElements getPartiturCommandAccess() {
		return pPartiturCommand;
	}
	
	public ParserRule getPartiturCommandRule() {
		return getPartiturCommandAccess().getRule();
	}
	
	//enum PartiturCommandFunction:
	//	startTask |
	//	startWorkflow |
	//	stopWorkflow |
	//	cancelWorkflow;
	public PartiturCommandFunctionElements getPartiturCommandFunctionAccess() {
		return ePartiturCommandFunction;
	}
	
	public EnumRule getPartiturCommandFunctionRule() {
		return getPartiturCommandFunctionAccess().getRule();
	}
	
	//enum EventType: // Task events
	//	TASK_STARTED | TASK_COMPLETED | TASK_TIMEDOUT | TASK_FAILED | // Workflow events
	//	WORKFLOW_SCHEDULED | WORKFLOW_STARTED | WORKFLOW_COMPLETED;
	public EventTypeElements getEventTypeAccess() {
		return eEventType;
	}
	
	public EnumRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}
	
	///********************************   HTTP Requests   ********************************/ HttpGet:
	//	'get' '(' url=STRING ')'
	//	uriVariables=UriVariables?
	//	headers+=HttpHeader*
	//	params+=QueryParam*;
	public HttpGetElements getHttpGetAccess() {
		return pHttpGet;
	}
	
	public ParserRule getHttpGetRule() {
		return getHttpGetAccess().getRule();
	}
	
	//HttpPost:
	//	'post' '(' url=STRING ')'
	//	uriVariables=UriVariables?
	//	headers+=HttpHeader*
	//	body=HttpBody?;
	public HttpPostElements getHttpPostAccess() {
		return pHttpPost;
	}
	
	public ParserRule getHttpPostRule() {
		return getHttpPostAccess().getRule();
	}
	
	//HttpPut:
	//	'put' '(' url=STRING ')'
	//	uriVariables=UriVariables?
	//	headers+=HttpHeader*
	//	body=HttpBody?;
	public HttpPutElements getHttpPutAccess() {
		return pHttpPut;
	}
	
	public ParserRule getHttpPutRule() {
		return getHttpPutAccess().getRule();
	}
	
	//HttpDelete:
	//	'delete' '(' url=STRING ')'
	//	uriVariables=UriVariables?
	//	headers+=HttpHeader*;
	public HttpDeleteElements getHttpDeleteAccess() {
		return pHttpDelete;
	}
	
	public ParserRule getHttpDeleteRule() {
		return getHttpDeleteAccess().getRule();
	}
	
	///********************************   HTTP Requests   ********************************/ HttpHeader:
	//	'.header(' name=STRING ',' value=STRING ')';
	public HttpHeaderElements getHttpHeaderAccess() {
		return pHttpHeader;
	}
	
	public ParserRule getHttpHeaderRule() {
		return getHttpHeaderAccess().getRule();
	}
	
	//UriVariables:
	//	'.uriVariables(' values+=STRING (',' values+=STRING)* ')';
	public UriVariablesElements getUriVariablesAccess() {
		return pUriVariables;
	}
	
	public ParserRule getUriVariablesRule() {
		return getUriVariablesAccess().getRule();
	}
	
	//QueryParam:
	//	'.queryParams(' name=STRING ',' value=STRING ')';
	public QueryParamElements getQueryParamAccess() {
		return pQueryParam;
	}
	
	public ParserRule getQueryParamRule() {
		return getQueryParamAccess().getRule();
	}
	
	//HttpBody:
	//	'.body(' value=STRING ')';
	public HttpBodyElements getHttpBodyAccess() {
		return pHttpBody;
	}
	
	public ParserRule getHttpBodyRule() {
		return getHttpBodyAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
